@* @page "/roles"
@using Microsoft.AspNetCore.Authorization
@using Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider _serviceProvider
@inject UserManager<ApplicationUser> _userManager
@inject RoleManager<IdentityRole> _roleManager

@attribute [Authorize(Policy = "AuthenticatedUser")]

<PageTitle>Roles Management</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="roles-admin-container">
            <div class="admin-header">
                <i class="bi bi-shield-lock me-2"></i>
                <h1>Role Management Panel</h1>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-people me-2"></i>User Directory
                    </h3>
                </div>
                <div class="card-body">
                    @if (users == null)
                    {
                        <div class="d-flex justify-content-center p-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Email</th>
                                        <th scope="col">Assigned Roles</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="bi bi-person-circle me-2 text-muted"></i>
                                                    @user.Email
                                                </div>
                                            </td>
                                            <td>
                                                @if (user.Roles.Any())
                                                {
                                                    @foreach (var role in user.Roles)
                                                    {
                                                        <span class="badge bg-@(role == "Admin" ? "danger" : "info") me-1">@role</span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No roles assigned</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-person-fill-add me-2"></i>Assign Role
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="roleAssignment" OnValidSubmit="HandleAssignRole" Context="editContext">
                        <DataAnnotationsValidator />
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            Select a user and assign a role to grant specific permissions
                        </div>
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <InputText id="userEmail" class="form-control" placeholder="Email" @bind-Value="roleAssignment.UserEmail" />
                                    <label for="userEmail">User Email</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputSelect id="roleName" class="form-select" @bind-Value="roleAssignment.RoleName">
                                        <option value="">Select a role...</option>
                                        <option value="Admin">Admin</option>
                                    </InputSelect>
                                    <label for="roleName">Role</label>
                                </div>
                            </div>
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check2-circle me-1"></i> Assign Role
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <div class="card text-center shadow">
                <div class="card-body p-5">
                    <i class="bi bi-shield-exclamation display-1 text-warning mb-3"></i>
                    <h2>Access Restricted</h2>
                    <p class="lead">This page requires administrator privileges.</p>
                    <hr />
                    <p>Please contact an administrator if you need access to this feature.</p>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<UserWithRoles> users;
    private List<string> roles = new List<string>();
    private RoleAssignmentModel roleAssignment = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await LoadRolesAsync();
        await CreateUserRoleAsync("haz@tec.dk", "Admin");
    }

    private async Task LoadUsersAsync()
    {
        var allUsers = _userManager.Users.ToList();
        users = new List<UserWithRoles>();

        foreach (var user in allUsers)
        {
            var userRoles = await _userManager.GetRolesAsync(user);
            users.Add(new UserWithRoles
                {
                    Email = user.Email,
                    Roles = userRoles
                });
        }
    }

    private async Task LoadRolesAsync()
    {
        roles = await _roleManager.Roles.Select(r => r.Name).ToListAsync();
    }

    private async Task HandleAssignRole()
    {
        var user = await _userManager.FindByEmailAsync(roleAssignment.UserEmail);
        if (user != null)
        {
            var roleExists = await _roleManager.RoleExistsAsync(roleAssignment.RoleName);
            if (!roleExists)
            {
                var roleResult = await _roleManager.CreateAsync(new IdentityRole(roleAssignment.RoleName));
                if (!roleResult.Succeeded)
                {
                    // Handle role creation errors
                    return;
                }
            }

            var result = await _userManager.AddToRoleAsync(user, roleAssignment.RoleName);

            if (result.Succeeded)
            {
                // Role assigned successfully
                await LoadUsersAsync(); // Refresh the user list
            }
            else
            {
                // Handle errors
            }
        }
        else
        {
            // Handle user not found
        }
    }

    private async Task CreateUserRoleAsync(string user, string role)
    {
        var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();

        var userRoleCheck = await roleManager.RoleExistsAsync(role);
        if (!userRoleCheck)
            await roleManager.CreateAsync(new IdentityRole(role));

        ApplicationUser identityUser = await _userManager.FindByEmailAsync(user);
        await _userManager.AddToRoleAsync(identityUser, role);
    }

    private class UserWithRoles
    {
        public string Email { get; set; }
        public IList<string> Roles { get; set; }
    }

    private class RoleAssignmentModel
    {
        public string UserEmail { get; set; }
        public string RoleName { get; set; }
    }
}
 *@