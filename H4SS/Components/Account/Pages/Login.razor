@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using H4SS.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h1>Sign In</h1>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }
        <StatusMessage Message="@statusMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger validation-summary" role="alert" />

            <div class="form-field">
                <label for="Input.Email" class="form-label">Email</label>
                <div class="input-with-icon">
                    <i class="bi bi-envelope"></i>
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control"
                               autocomplete="username" aria-required="true" placeholder="name@example.com" />
                </div>
                <ValidationMessage For="() => Input.Email" class="field-validation" />
            </div>

            <div class="form-field">
                <label for="Input.Password" class="form-label">Password</label>
                <div class="input-with-icon">
                    <i class="bi bi-lock"></i>
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                               class="form-control" autocomplete="current-password"
                               aria-required="true" placeholder="•••••••••" />
                </div>
                <ValidationMessage For="() => Input.Password" class="field-validation" />
            </div>

            <div class="remember-me">
                <label class="form-check">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <span>Remember me</span>
                </label>
                <a href="Account/ForgotPassword" class="forgot-link">Forgot password?</a>
            </div>

            <button type="submit" class="btn-login">Sign In</button>

            <div class="login-footer">
                <p>
                    Don't have an account?
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Register
                    </a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl); // Redirect to CprNr page ReturnUrl
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
