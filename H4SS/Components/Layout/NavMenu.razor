@implements IDisposable
@inject NavigationManager NavigationManager
@using BlazorBootstrap;
@using Microsoft.AspNetCore.Authorization

<div class="top-row navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="" id="app-brand">
            <img src="favicon.png" alt="H4SS Logo" class="navbar-logo" />
            <span class="brand-text">Todoist</span>
        </a>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <!-- Main Navigation Items -->
        <div class="nav-item">
            <NavLink class="nav-link" href="todolist" id="nav-todo">
                <i class="bi bi-list-task nav-icon"></i>
                <span class="nav-text">Todo List</span>
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link" href="cprnr" id="nav-cprnr">
                <i class="bi bi-person-badge nav-icon"></i>
                <span class="nav-text">CPR Number</span>
            </NavLink>
        </div>

        <div class="nav-item">
            <NavLink class="nav-link" href="admin" id="nav-roles">
                <i class="bi bi-shield-lock nav-icon"></i>
                <span class="nav-text">Admin</span>
            </NavLink>
        </div>

        <div class="nav-divider"></div>

        <!-- Authentication Items -->
        <AuthorizeView>
            <Authorized>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Account/Manage" id="nav-account">
                        <span class="nav-text">
                            @context.User.Identity?.Name
                            @if (context.User.IsInRole("Admin"))
                            {
                                <span class="admin-badge">Admin</span>
                            }
                        </span>
                    </NavLink>
                </div>
                <div class="nav-item">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link logout-button" id="nav-logout">
                            <i class="bi bi-box-arrow-left nav-icon"></i>
                            <span class="nav-text">Logout</span>
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Account/Register" id="nav-register">
                        <i class="bi bi-person-plus nav-icon"></i>
                        <span class="nav-text">Register</span>
                    </NavLink>
                </div>
                <div class="nav-item">
                    <NavLink class="nav-link" href="Account/Login" id="nav-login">
                        <i class="bi bi-box-arrow-in-right nav-icon"></i>
                        <span class="nav-text">Login</span>
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
